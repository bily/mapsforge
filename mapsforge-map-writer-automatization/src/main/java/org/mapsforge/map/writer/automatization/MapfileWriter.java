/*
 * Copyright 2010, 2011, 2012 mapsforge.org
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.03.11 at 03:25:14 PM MEZ 
//

package org.mapsforge.map.writer.automatization;

import java.io.File;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for mapfile-writer complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="mapfile-writer">
 *   &lt;complexContent>
 *     &lt;extension base="{http://mapsforge.org/mapsforge-preprocessing-conf}sink">
 *       &lt;attribute name="type" default="ram">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;enumeration value="ram"/>
 *             &lt;enumeration value="hd"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="bbox" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="map-start-position" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="comment" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="waynode-compression" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="pixel-filter" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="polygon-clipping" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="zoom-interval-conf" type="{http://www.w3.org/2001/XMLSchema}string" default="8,0,11,14,12,21" />
 *       &lt;attribute name="thread-pool-size">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *             &lt;minInclusive value="1"/>
 *             &lt;maxInclusive value="128"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="debug-file" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "mapfile-writer")
public class MapfileWriter extends Sink {

	/**
	 * A parameter to declare if the output of the mapfile-writer should be stored in ram or on disk before writing the
	 * map file.
	 */
	@XmlAttribute
	private String type;

	/**
	 * The parameter for the bbox feature of the mapfile-writer. This is a comma separated string of doubles that should
	 * not have any white space.
	 */
	@XmlAttribute
	private String bbox;

	/**
	 * The start position to centralized the map.
	 */
	@XmlAttribute(name = "map-start-position")
	private String mapStartPosition;

	/**
	 * The comment of the user of the mapfile-writer.
	 */
	@XmlAttribute
	private String comment;

	/**
	 * The parameter to turn on the waynode-compression.
	 */
	@XmlAttribute(name = "waynode-compression")
	private Boolean waynodeCompression;

	/**
	 * A parameter to turn on the picel-filter.
	 */
	@XmlAttribute(name = "pixel-filter")
	private Boolean pixelFilter;

	/**
	 * A parameter to turn on the polygon-clipping.
	 */
	@XmlAttribute(name = "polygon-clipping")
	private Boolean polygonClipping;

	/**
	 * The parameter to configure the zoom intervals.
	 */
	@XmlAttribute(name = "zoom-interval-conf")
	private String zoomIntervalConf;

	/**
	 * A parameter to set the number of thread that are used to generate the map file. The value should be twice as the
	 * number of cores.
	 */
	@XmlAttribute(name = "thread-pool-size")
	private Integer threadPoolSize;

	/**
	 * A boolean to switch for writing the debug information into the written map file.
	 */
	@XmlAttribute(name = "debug-file")
	private Boolean debugFile;

	/**
	 * Gets the value of the type property.
	 * 
	 * @return possible object is {@link String }
	 */
	public String getType() {
		if (this.type == null) {
			return "ram";
		}
		return this.type;
	}

	/**
	 * Sets the value of the type property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 */
	public void setType(String value) {
		this.type = value;
	}

	/**
	 * Gets the value of the bbox property.
	 * 
	 * @return possible object is {@link String }
	 */
	public String getBbox() {
		return this.bbox;
	}

	/**
	 * Sets the value of the bbox property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 */
	public void setBbox(String value) {
		this.bbox = value;
	}

	/**
	 * Gets the value of the mapStartPosition property.
	 * 
	 * @return possible object is {@link String }
	 */
	public String getMapStartPosition() {
		return this.mapStartPosition;
	}

	/**
	 * Sets the value of the mapStartPosition property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 */
	public void setMapStartPosition(String value) {
		this.mapStartPosition = value;
	}

	/**
	 * Gets the value of the comment property.
	 * 
	 * @return possible object is {@link String }
	 */
	public String getComment() {
		return this.comment;
	}

	/**
	 * Sets the value of the comment property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 */
	public void setComment(String value) {
		this.comment = value;
	}

	/**
	 * Gets the value of the waynodeCompression property.
	 * 
	 * @return possible object is {@link Boolean }
	 */
	public boolean isWaynodeCompression() {
		if (this.waynodeCompression == null) {
			return true;
		}
		return this.waynodeCompression;
	}

	/**
	 * Sets the value of the waynodeCompression property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 */
	public void setWaynodeCompression(Boolean value) {
		this.waynodeCompression = value;
	}

	/**
	 * Gets the value of the pixelFilter property.
	 * 
	 * @return possible object is {@link Boolean }
	 */
	public boolean isPixelFilter() {
		if (this.pixelFilter == null) {
			return true;
		}
		return this.pixelFilter;
	}

	/**
	 * Sets the value of the pixelFilter property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 */
	public void setPixelFilter(Boolean value) {
		this.pixelFilter = value;
	}

	/**
	 * Gets the value of the polygonClipping property.
	 * 
	 * @return possible object is {@link Boolean }
	 */
	public boolean isPolygonClipping() {
		if (this.polygonClipping == null) {
			return true;
		}
		return this.polygonClipping;
	}

	/**
	 * Sets the value of the polygonClipping property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 */
	public void setPolygonClipping(Boolean value) {
		this.polygonClipping = value;
	}

	/**
	 * Gets the value of the zoomIntervalConf property.
	 * 
	 * @return possible object is {@link String }
	 */
	public String getZoomIntervalConf() {
		if (this.zoomIntervalConf == null) {
			return "8,0,11,14,12,21";
		}
		return this.zoomIntervalConf;
	}

	/**
	 * Sets the value of the zoomIntervalConf property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 */
	public void setZoomIntervalConf(String value) {
		this.zoomIntervalConf = value;
	}

	/**
	 * Gets the value of the threadPoolSize property.
	 * 
	 * @return possible object is {@link Integer }
	 */
	public Integer getThreadPoolSize() {
		return this.threadPoolSize;
	}

	/**
	 * Sets the value of the threadPoolSize property.
	 * 
	 * @param value
	 *            allowed object is {@link Integer }
	 */
	public void setThreadPoolSize(Integer value) {
		this.threadPoolSize = value;
	}

	/**
	 * Gets the value of the debugFile property.
	 * 
	 * @return possible object is {@link Boolean }
	 */
	public boolean isDebugFile() {
		if (this.debugFile == null) {
			return false;
		}
		return this.debugFile;
	}

	/**
	 * Sets the value of the debugFile property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 */
	public void setDebugFile(Boolean value) {
		this.debugFile = value;
	}

	@Override
	public String generate(List<String> md5List, String absoluteWorkingDirPath, String absoluteOutputDirPath) {

		final StringBuilder sb = new StringBuilder();

		// create output file
		File outputFile = null;
		outputFile = FileOperation.createWriteFile(absoluteOutputDirPath, getFile());

		if (outputFile == null) {
			throw new RuntimeException("An unexpected error occured. File is null.");
		}

		// check md5
		if (isMd5()) {
			md5List.add(outputFile.getAbsolutePath());
		}

		// generate osmosis call
		sb.append("--mw").append(" ");
		sb.append("file=").append(outputFile.getAbsolutePath()).append(" ");
		if (this.type != null) {
			sb.append("type=").append(this.type).append(" ");
		}

		if (this.bbox != null) {
			sb.append("bbox=").append(this.bbox).append(" ");
		}
		if (this.mapStartPosition != null) {
			sb.append("map-start-position=").append(this.mapStartPosition).append(" ");
		}
		if (this.comment != null) {
			sb.append("comment=").append(this.comment).append(" ");
		}
		if (this.waynodeCompression != null) {
			sb.append("waynode-compression=").append(this.waynodeCompression).append(" ");
		}
		if (this.pixelFilter != null) {
			sb.append("pixel-filter=").append(this.pixelFilter).append(" ");
		}
		if (this.polygonClipping != null) {
			sb.append("polygon-clipping=").append(this.polygonClipping).append(" ");
		}
		if (this.zoomIntervalConf != null) {
			sb.append("zoom-interval-conf=").append(this.zoomIntervalConf).append(" ");
		}
		if (this.threadPoolSize != null) {
			sb.append("thread-pool-size=").append(this.threadPoolSize).append(" ");
		}
		if (this.debugFile != null) {
			sb.append("debug-file=").append(this.debugFile).append(" ");
		}
		return sb.toString();
	}
}
