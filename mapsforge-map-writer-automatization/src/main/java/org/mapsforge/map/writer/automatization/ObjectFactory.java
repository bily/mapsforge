/*
 * Copyright 2010, 2011, 2012 mapsforge.org
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.03.11 at 03:25:14 PM MEZ 
//

package org.mapsforge.map.writer.automatization;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;

/**
 * This object contains factory methods for each Java content interface and Java element interface generated in the
 * org.mapsforge.map.writer.automatization package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the Java representation for XML content.
 * The Java representation of XML content can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory methods for each of these are provided in
 * this class.
 */
@XmlRegistry
public class ObjectFactory {

	private final static QName _PolygonAreaFilter_QNAME = new QName(
			"http://mapsforge.org/mapsforge-preprocessing-conf", "polygon-area-filter");
	private final static QName _Sink_QNAME = new QName("http://mapsforge.org/mapsforge-preprocessing-conf", "sink");
	private final static QName _MapfileWriter_QNAME = new QName("http://mapsforge.org/mapsforge-preprocessing-conf",
			"mapfile-writer");
	private final static QName _BboxAreaFilter_QNAME = new QName("http://mapsforge.org/mapsforge-preprocessing-conf",
			"bbox-area-filter");
	private final static QName _Configuration_QNAME = new QName("http://mapsforge.org/mapsforge-preprocessing-conf",
			"configuration");
	private final static QName _ReadPbf_QNAME = new QName("http://mapsforge.org/mapsforge-preprocessing-conf",
			"read-pbf");
	private final static QName _WritePbf_QNAME = new QName("http://mapsforge.org/mapsforge-preprocessing-conf",
			"write-pbf");
	private final static QName _RoutinggraphWriter_QNAME = new QName(
			"http://mapsforge.org/mapsforge-preprocessing-conf", "routinggraph-writer");
	private final static QName _SinkSource_QNAME = new QName("http://mapsforge.org/mapsforge-preprocessing-conf",
			"sink-source");
	private final static QName _Source_QNAME = new QName("http://mapsforge.org/mapsforge-preprocessing-conf", "source");

	/**
	 * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package:
	 * org.mapsforge.map.writer.automatization
	 */
	public ObjectFactory() {
		// the default constructor of an object factory.
	}

	/**
	 * Create an instance of {@link Pipeline }
	 * 
	 * @return returns a new pipeline.
	 */
	public Pipeline createPipeline() {
		return new Pipeline();
	}

	/**
	 * Create an instance of {@link RoutinggraphWriter }
	 * 
	 * @return returns a new routinggraph writer.
	 */
	public RoutinggraphWriter createRoutinggraphWriter() {
		return new RoutinggraphWriter();
	}

	/**
	 * Create an instance of {@link ReadPbf }
	 * 
	 * @return returns a new pbf reader.
	 */
	public ReadPbf createReadPbf() {
		return new ReadPbf();
	}

	/**
	 * Create an instance of {@link Configuration }
	 * 
	 * @return returns an new configuration.
	 */
	public Configuration createConfiguration() {
		return new Configuration();
	}

	/**
	 * Create an instance of {@link MapfileWriter }
	 * 
	 * @return returns a new mapfile writer.
	 */
	public MapfileWriter createMapfileWriter() {
		return new MapfileWriter();
	}

	/**
	 * Create an instance of {@link WritePbf }
	 * 
	 * @return returns a new pbf writer.
	 */
	public WritePbf createWritePbf() {
		return new WritePbf();
	}

	/**
	 * Create an instance of {@link PolygonAreaFilter }
	 * 
	 * @return returns a new polygon area filter
	 */
	public PolygonAreaFilter createPolygonAreaFilter() {
		return new PolygonAreaFilter();
	}

	/**
	 * Create an instance of {@link BboxAreaFilter }
	 * 
	 * @return returns a new bbox are filter.
	 */
	public BboxAreaFilter createBboxAreaFilter() {
		return new BboxAreaFilter();
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link PolygonAreaFilter }{@code >}
	 * 
	 * @param value
	 *            the polygon area filter that should created.
	 * @return returns the polygon area filter.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "polygon-area-filter", substitutionHeadNamespace = "http://mapsforge.org/mapsforge-preprocessing-conf", substitutionHeadName = "sink-source")
	public JAXBElement<PolygonAreaFilter> createPolygonAreaFilter(PolygonAreaFilter value) {
		return new JAXBElement<PolygonAreaFilter>(_PolygonAreaFilter_QNAME, PolygonAreaFilter.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link Sink }{@code >}
	 * 
	 * @param value
	 *            the sink, that should created.
	 * @return returns a sink
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "sink")
	public JAXBElement<Sink> createSink(Sink value) {
		return new JAXBElement<Sink>(_Sink_QNAME, Sink.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link MapfileWriter }{@code >}
	 * 
	 * @param value
	 *            the mapfile-writer that should created.
	 * @return returns the mapfile-writer.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "mapfile-writer", substitutionHeadNamespace = "http://mapsforge.org/mapsforge-preprocessing-conf", substitutionHeadName = "sink")
	public JAXBElement<MapfileWriter> createMapfileWriter(MapfileWriter value) {
		return new JAXBElement<MapfileWriter>(_MapfileWriter_QNAME, MapfileWriter.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link BboxAreaFilter }{@code >}
	 * 
	 * @param value
	 *            the bbox are filter that should created.
	 * @return returns the bbox area filter.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "bbox-area-filter", substitutionHeadNamespace = "http://mapsforge.org/mapsforge-preprocessing-conf", substitutionHeadName = "sink-source")
	public JAXBElement<BboxAreaFilter> createBboxAreaFilter(BboxAreaFilter value) {
		return new JAXBElement<BboxAreaFilter>(_BboxAreaFilter_QNAME, BboxAreaFilter.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link Configuration }{@code >}
	 * 
	 * @param value
	 *            the configuration that should created.
	 * @return returns the configuration.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "configuration")
	public JAXBElement<Configuration> createConfiguration(Configuration value) {
		return new JAXBElement<Configuration>(_Configuration_QNAME, Configuration.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link ReadPbf }{@code >}
	 * 
	 * @param value
	 *            the pbf reader that should created.
	 * @return returns the pbf reader.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "read-pbf", substitutionHeadNamespace = "http://mapsforge.org/mapsforge-preprocessing-conf", substitutionHeadName = "source")
	public JAXBElement<ReadPbf> createReadPbf(ReadPbf value) {
		return new JAXBElement<ReadPbf>(_ReadPbf_QNAME, ReadPbf.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link WritePbf }{@code >}
	 * 
	 * @param value
	 *            the pbf writer that should created.
	 * @return returns the pbf writer.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "write-pbf", substitutionHeadNamespace = "http://mapsforge.org/mapsforge-preprocessing-conf", substitutionHeadName = "sink")
	public JAXBElement<WritePbf> createWritePbf(WritePbf value) {
		return new JAXBElement<WritePbf>(_WritePbf_QNAME, WritePbf.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link RoutinggraphWriter }{@code >}
	 * 
	 * @param value
	 *            the routinggraph-writer that should created.
	 * @return returns the routinggraph-writer.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "routinggraph-writer", substitutionHeadNamespace = "http://mapsforge.org/mapsforge-preprocessing-conf", substitutionHeadName = "sink")
	public JAXBElement<RoutinggraphWriter> createRoutinggraphWriter(RoutinggraphWriter value) {
		return new JAXBElement<RoutinggraphWriter>(_RoutinggraphWriter_QNAME, RoutinggraphWriter.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link SinkSource }{@code >}
	 * 
	 * @param value
	 *            the sink-source that should created.
	 * @return returns the sink-source.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "sink-source")
	public JAXBElement<SinkSource> createSinkSource(SinkSource value) {
		return new JAXBElement<SinkSource>(_SinkSource_QNAME, SinkSource.class, null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link Source }{@code >}
	 * 
	 * @param value
	 *            the source that should created.
	 * @return returns the source.
	 */
	@XmlElementDecl(namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", name = "source")
	public JAXBElement<Source> createSource(Source value) {
		return new JAXBElement<Source>(_Source_QNAME, Source.class, null, value);
	}

}
