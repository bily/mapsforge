/*
 * Copyright 2010, 2011, 2012 mapsforge.org
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.03.11 at 03:25:14 PM MEZ 
//

package org.mapsforge.map.writer.automatization;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for source complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="source">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://mapsforge.org/mapsforge-preprocessing-conf}sink-source" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://mapsforge.org/mapsforge-preprocessing-conf}sink" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="file" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "source", propOrder = { "sinkSource", "sink" })
@XmlSeeAlso({ ReadPbf.class })
public abstract class Source {

	/**
	 * A list of sink-sources that use this source.
	 */
	@XmlElementRef(name = "sink-source", namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", type = JAXBElement.class)
	private List<JAXBElement<? extends SinkSource>> sinkSource;

	/**
	 * A list of sinks that use this source.
	 */
	@XmlElementRef(name = "sink", namespace = "http://mapsforge.org/mapsforge-preprocessing-conf", type = JAXBElement.class)
	private List<JAXBElement<? extends Sink>> sink;

	/**
	 * The path to the file that is the source file.
	 */
	@XmlAttribute(required = true)
	private String file;

	/**
	 * Gets the value of the sinkSource property.
	 * <p>
	 * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
	 * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
	 * the sinkSource property.
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getSinkSource().add(newItem);
	 * </pre>
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link JAXBElement }{@code <} {@link SinkSource }{@code >}
	 * {@link JAXBElement }{@code <}{@link BboxAreaFilter }{@code >} {@link JAXBElement }{@code <}{@link PolygonAreaFilter }
	 * {@code >}
	 * 
	 * @return returns a list of all sink-sources that need the data of the source for their execution.
	 */
	public List<JAXBElement<? extends SinkSource>> getSinkSource() {
		if (this.sinkSource == null) {
			this.sinkSource = new ArrayList<JAXBElement<? extends SinkSource>>();
		}
		return this.sinkSource;
	}

	/**
	 * Gets the value of the sink property.
	 * <p>
	 * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
	 * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
	 * the sink property.
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getSink().add(newItem);
	 * </pre>
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link JAXBElement }{@code <} {@link Sink }{@code >}
	 * {@link JAXBElement } {@code <}{@link WritePbf }{@code >} {@link JAXBElement }{@code <} {@link MapfileWriter }{@code >}
	 * {@link JAXBElement }{@code <} {@link RoutinggraphWriter }{@code >}
	 * 
	 * @return returns a list of all sinks that use this data for their execution.
	 */
	public List<JAXBElement<? extends Sink>> getSink() {
		if (this.sink == null) {
			this.sink = new ArrayList<JAXBElement<? extends Sink>>();
		}
		return this.sink;
	}

	/**
	 * Gets the value of the file property.
	 * 
	 * @return possible object is {@link String }
	 */
	public String getFile() {
		return this.file;
	}

	/**
	 * Sets the value of the file property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 */
	public void setFile(String value) {
		this.file = value;
	}

	/**
	 * The default implementation for all sources. Here is the call to split the pipe for each task that need this data
	 * as source. Also the osmosis call of each task would be generated. It is necessary that every implementation of a
	 * source call the super constructor of this method to implement this too.
	 * 
	 * @param md5List
	 *            list of files where a MD5 file should generated
	 * @param absoluteWorkingDirPath
	 *            the absolute path to the working directory
	 * @param absoluteOutputDirPath
	 *            the absolute path of the output directory
	 * @return the generated osmosis call
	 */
	public String generate(List<String> md5List, String absoluteWorkingDirPath, String absoluteOutputDirPath) {

		// get the count of all sub task to set the tee parameter
		final int teeTotal = (this.sinkSource != null ? this.sinkSource.size() : 0)
				+ (this.sink != null ? this.sink.size() : 0);

		final StringBuilder sb = new StringBuilder();

		// generate the tee parameter call
		if (teeTotal >= 2) {
			sb.append("--tee").append(" ").append("outputCount=").append(teeTotal).append(" ");
		}

		// generate and add the osmosis call of each sink-source
		if (this.sinkSource != null) {
			for (final JAXBElement<? extends SinkSource> ss : this.sinkSource) {
				sb.append(ss.getValue().generate(md5List, absoluteWorkingDirPath, absoluteOutputDirPath)).append(" ");
			}
		}

		// generate and add the osmosis call of each sink
		if (this.sink != null) {
			for (final JAXBElement<? extends Sink> s : this.sink) {
				sb.append(s.getValue().generate(md5List, absoluteWorkingDirPath, absoluteOutputDirPath)).append(" ");
			}
		}
		return sb.toString();
	}
}
