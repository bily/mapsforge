#DATABASE SETUP
################
#routingGraph.db.user=osm
#routingGraph.db.password=osm
#routingGraph.db.jdbc=postgresql
#routingGraph.db.host=wasser.mi.fu-berlin.de
#routingGraph.db.database=osm_base

#MISC
######
routingGraph.transportName=STANDARD_CAR__SIMPLE_HEURISTIC
#routingGraph.expectedVertices=45000
#routingGraph.algorithm=ASTAR_REACH
#routingGraph.layerClass=org.mapsforge.server.routing.astarreach.ArrayBasedReachLayer
#routingGraph.graphClass=org.mapsforge.server.routing.astarreach.ArrayBasedReachGraph

#SQL QUERIES
#############
# name of the underlying streetmap material
routingGraph.sql.getStreetMapName=SELECT 'Germany_Berlin_2009-11-04' AS streetMapName
# number of vertices: one row expected, it must contain "numberOfVertices"
routingGraph.sql.getNumberOfVertices=SELECT COUNT(DISTINCT n.id) AS numberOfVertices FROM (SELECT source_id AS id FROM adjacency_list UNION SELECT dest_id AS id FROM adjacency_list) AS sq INNER JOIN nodes AS n ON n.id = sq.id LEFT OUTER JOIN reaches AS r ON r.node_id = sq.id WHERE r.configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC'
# vertices: each row must contain "id", "reach", "lat", "lon"
# all rows must be sorted incrementally by "id"
routingGraph.sql.getVertices=SELECT n.id AS id, r.reach AS reach, latitude AS lat, longitude AS lon FROM (SELECT source_id AS id FROM adjacency_list UNION SELECT dest_id AS id FROM adjacency_list) AS sq INNER JOIN nodes AS n ON n.id = sq.id LEFT OUTER JOIN reaches AS r ON r.node_id = sq.id WHERE r.configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC' ORDER BY n.id
# adjacency lists: each row must contain "id", "dest", "cost"
# all rows must be sorted incrementally by "id"
routingGraph.sql.getAdjacencyLists=SELECT source_id AS id, dest_id AS dest, weight AS cost FROM adjacency_list AS al WHERE al.configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC' ORDER BY id, dest
# way INTERMEDIATE nodes: each row must contain "id", "dest", "lat", "lon"
# -> the source and destination are not covered by the term "INTERMEDIATE" !!
# all rows must be sorted incrementally by "id", "dest", "numb" (the node number on this way)
routingGraph.sql.getWayIntermediateNodes=SELECT 'null' as id,'null' as  dest,'null' as  numb,'null' as  lat,'null' as  lon FROM adjacency_list AS al WHERE al.configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC' AND al.source_id = -1
#routingGraph.sql.getWayIntermediateNodes=SELECT source_id AS id, dest_id AS dest, numb, latitude AS lat, longitude AS lon FROM adjacency_list AS al WHERE al.configuration = ? ORDER BY id, dest, numb


