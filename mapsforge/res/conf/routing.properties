#org.mapsforge.server.routing.core.Router.Property.DB__DATABASE=osm_base
#org.mapsforge.server.routing.core.Router.Property.DB__HOST=localhost
#org.mapsforge.server.routing.core.Router.Property.DB__JDBC=postgresql
#org.mapsforge.server.routing.core.Router.Property.DB__JDBC_DRIVER=org.postgresql.Driver
#org.mapsforge.server.routing.core.Router.Property.DB__PASSWORD=osm
#org.mapsforge.server.routing.core.Router.Property.DB__USE_AS_INPUT=true
#org.mapsforge.server.routing.core.Router.Property.DB__USER=osm
#org.mapsforge.server.routing.core.Router.Property.GM__DATAINPUT=
#org.mapsforge.server.routing.core.Router.Property.GM__DATAOUTPUT=
org.mapsforge.server.routing.core.Router.Property.GM__TYPE=org.mapsforge.server.routing.highwayHierarchies.HHCompleteRoutingGraph
#org.mapsforge.server.routing.core.Router.Property.GM__TYPE=org.mapsforge.server.routing.core.SqlBackedGeoMap
#org.mapsforge.server.routing.core.Router.Property.GM__TYPE=org.mapsforge.server.routing.core.ArrayBasedGeoMap
#org.mapsforge.server.routing.core.Router.Property.GM__STREETMAP_NAME=Europe_Germany_Berlin_Berlin
#org.mapsforge.server.routing.core.Router.Property.GM__STREETMAP_DATE=2009-11-01
org.mapsforge.server.routing.core.Router.Property.R__TYPE=org.mapsforge.server.routing.highwayHierarchies.HHRouter
#org.mapsforge.server.routing.core.Router.Property.R__TYPE=org.mapsforge.server.routing.astarreach.DijkstraRouter
#org.mapsforge.server.routing.core.Router.Property.R__TYPE=org.mapsforge.server.routing.astarreach.AStarRouter
#org.mapsforge.server.routing.core.Router.Property.R__TYPE=org.mapsforge.server.routing.astarreach.AStarReachRouter
#org.mapsforge.server.routing.core.Router.Property.RG__DATAINPUT=
#org.mapsforge.server.routing.core.Router.Property.RG__DATAOUTPUT=
org.mapsforge.server.routing.core.Router.Property.RG__TYPE=org.mapsforge.server.routing.highwayHierarchies.HHCompleteRoutingGraph
#org.mapsforge.server.routing.core.Router.Property.RG__TYPE=org.mapsforge.server.routing.astarreach.AsrRoutingGraph
org.mapsforge.server.routing.core.Router.Property.V__VEHICLE_NAME=STANDARD_CAR__SIMPLE_HEURISTIC

#org.mapsforge.server.routing.astarreach.AsrRoutingGraph.SqlCommand.GET_VERTICES=SELECT vertex_id, CEIL(reach) AS reachValue FROM reaches WHERE configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC' ORDER BY vertex_id;
#org.mapsforge.server.routing.astarreach.AsrRoutingGraph.SqlCommand.GET_EDGES=SELECT rs.vertex_id AS source, rd.vertex_id AS destination, FLOOR(e.weight) AS cost FROM reaches AS rs INNER JOIN adjacency_list AS e ON rs.node_id = e.source_id INNER JOIN reaches AS rd ON rd.node_id = e.dest_id WHERE rs.configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC' AND rd.configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC' ORDER BY source, destination;
# TODO
#org.mapsforge.server.routing.astarreach.AsrRoutingGraph.SqlCommand.GET_RULES=

#org.mapsforge.server.routing.core.SqlBackedGeoMap.SqlCommand.GET_BOUNDINGBOX=SELECT MIN(int_latitude) AS min_latitude, MIN(int_longitude) AS min_longitude, MAX(int_latitude) AS max_latitude, MAX(int_longitude) AS max_longitude FROM nodes;
#org.mapsforge.server.routing.core.SqlBackedGeoMap.SqlCommand.GET_POINT_FOR_VERTEX_ID=SELECT n.int_latitude, n.int_longitude FROM nodes AS n INNER JOIN reaches AS r ON n.id = r.node_id WHERE r.vertex_id = ?;
#org.mapsforge.server.routing.core.SqlBackedGeoMap.SqlCommand.GET_VERTICES_FOR_WAYPOINT=SELECT vertex_id, distance FROM waynode_vertex WHERE latitude = ? AND longitude = ? ORDER BY distance;
#org.mapsforge.server.routing.core.SqlBackedGeoMap.SqlCommand.GET_WAYPOINTS_FOR_POINT=SELECT n1.int_latitude AS latitude, n1.int_longitude AS longitude FROM nodes AS n1 INNER JOIN edge_nodes AS en1 ON n1.id = en1.node_id INNER JOIN (SELECT en.edge_id, MIN(d.qdistance) AS min_qdist FROM (SELECT n.id, (n.int_latitude - ? )^2+(n.int_longitude - ? )^2 AS qdistance FROM nodes AS n WHERE ? <= n.int_latitude AND n.int_latitude <= ? AND ? <= n.int_longitude AND n.int_longitude <= ? ) AS d INNER JOIN edge_nodes AS en ON en.node_id = d.id INNER JOIN edges AS e ON e.id = en.edge_id INNER JOIN reaches AS rs ON rs.node_id = e.source_id INNER JOIN reaches AS rd ON rd.node_id = e.dest_id WHERE rs.configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC' AND rd.configuration = 'STANDARD_CAR__SIMPLE_HEURISTIC' GROUP BY en.edge_id) AS ed ON ed.edge_id = en1.edge_id AND ed.min_qdist = (n1.int_latitude - ? )^2+(n1.int_longitude - ? )^2 ORDER BY ed.min_qdist LIMIT ?;
#org.mapsforge.server.routing.core.SqlBackedGeoMap.SqlCommand.GET_INTERMEDIATE_NODES_FOR_WAY=SELECT wn.int_latitude, wn.int_longitude FROM nodes AS wn INNER JOIN edge_nodes AS en ON en.node_id = wn.id INNER JOIN edges AS e ON e.id = en.edge_id INNER JOIN reaches AS rs ON rs.node_id = e.source_id INNER JOIN reaches AS rd ON rd.node_id = e.dest_id WHERE wn.id <> rs.node_id AND wn.id <> rd.node_id AND rs.vertex_id = ? AND rd.vertex_id = ? ORDER BY en.sequence_id;

#org.mapsforge.server.routing.core.ArrayBasedGeoMap.SqlCommand.GET_POINTS_FOR_ALL_VERTICES=SELECT r.vertex_id, n.int_latitude, n.int_longitude FROM nodes AS n INNER JOIN reaches AS r ON n.id = r.node_id ORDER BY 1;
#org.mapsforge.server.routing.core.ArrayBasedGeoMap.SqlCommand.GET_INTERMEDIATE_NODES_FOR_ALL_WAYS=SELECT rs.vertex_id, rd.vertex_id, wn.int_latitude, wn.int_longitude FROM nodes AS wn INNER JOIN edge_nodes AS en ON en.node_id = wn.id INNER JOIN edges AS e ON e.id = en.edge_id INNER JOIN reaches AS rs ON rs.node_id = e.source_id INNER JOIN reaches AS rd ON rd.node_id = e.dest_id WHERE wn.id <> rs.node_id AND wn.id <> rd.node_id ORDER BY rs.vertex_id, rd.vertex_id, en.sequence_id;
