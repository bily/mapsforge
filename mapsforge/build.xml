<?xml version="1.0" encoding="UTF-8"?>
<!--
Use this Ant script for convenience with creating a distribution of mapsforge.
The script in not intended for building the project. Use Eclipse for this
purpose.
-->
<project name="mapsforge">
	<property name="mapsforge.version" value="0.2.4" />

	<property name="mapsforge.bin" value="bin" />
	<property name="mapsforge.lib" value="lib" />
	<property name="mapsforge.src" value="src" />
	<property name="mapsforge.dist" value="dist" />
	<property name="mapsforge.doc" value="doc" />

	<property name="mapsforge.advancemapviewer.lib.dir"
	          value="${basedir}/../AdvancedMapViewer/lib" />
	<property name="mapsforge.samples.lib.dir" value="${basedir}/../Samples/lib" />
	<property name="mapsforge.routingservlet.lib.dir"
	          value="${basedir}/../HHRoutingWebservice/WebContent/WEB-INF/lib" />

	<!-- Path to the properties file that includes the keystore parameters -->
	<property file="../mapsforge-keystore.properties" />

	<!-- List of files to be included in every distribution (JAR file) -->
	<fileset dir="." id="info" includes="COPYING, COPYING.LESSER, NEWS" />

	<!-- List of all JAR files in the library folder -->
	<path id="classpath">
		<fileset dir="${mapsforge.lib}">
			<include name="*.jar" />
		</fileset>
	</path>


	<!-- Check if the keystore exists -->
	<target name="check-for-keystore">
		<available file="${mapsforge.keystore.location}"
		           type="file"
		           property="keystore.present" />
	</target>


	<!-- Delete temporary folders -->
	<target name="clean">
		<delete dir="${mapsforge.doc}" />
		<delete dir="${mapsforge.dist}" />
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.doc}" />
		</antcall>
	</target>


	<!-- Refresh the given resource if Ant runs in the same JRE as the workspace -->
	<target name="eclipse-refresh" if="eclipse.running">
		<eclipse.refreshLocal resource="${resource}" depth="infinite" />
	</target>


	<!-- ################## mapsforge-map-jar ################## -->


	<!-- Create the JAR file -->
	<target name="mapsforge-map-jar-create">
		<mkdir dir="${mapsforge.dist}" />
		<!-- Include source code and generated class files, avoid duplicates -->
		<jar destfile="${mapsforge.dist}/mapsforge-map-${mapsforge.version}.jar"
		     duplicate="preserve">
			<fileset dir="${mapsforge.bin}" includes="org/mapsforge/android/maps/" />
			<fileset dir="${mapsforge.src}" includes="org/mapsforge/android/maps/" />
			<fileset refid="info" />
		</jar>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Sign and verify the JAR file if the keystore exists -->
	<target name="mapsforge-map-jar-sign"
	        depends="check-for-keystore,mapsforge-map-jar-create"
	        if="keystore.present">
		<signjar jar="${mapsforge.dist}/mapsforge-map-${mapsforge.version}.jar"
		         keystore="${mapsforge.keystore.location}"
		         storepass="${mapsforge.keystore.pass}"
		         alias="${mapsforge.keystore.alias}"
		         keypass="${mapsforge.key.pass}" />
		<!-- Verify the signed JAR file and stop if verification was not successful -->
		<exec executable="jarsigner" failonerror="true">
			<arg value="-verify" />
			<arg value="${mapsforge.dist}/mapsforge-map-${mapsforge.version}.jar" />
		</exec>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Copy the created JAR file to the other projects -->
	<target name="mapsforge-map-jar-copy" depends="mapsforge-map-jar-sign">
		<copy overwrite="true"
		      file="${mapsforge.dist}/mapsforge-map-${mapsforge.version}.jar"
		      todir="${mapsforge.advancemapviewer.lib.dir}" />
		<copy overwrite="true"
		      file="${mapsforge.dist}/mapsforge-map-${mapsforge.version}.jar"
		      todir="${mapsforge.samples.lib.dir}" />
		<antcall target="eclipse-refresh">
			<param name="resource" value="AdvancedMapViewer/lib" />
		</antcall>
		<antcall target="eclipse-refresh">
			<param name="resource" value="Samples/lib" />
		</antcall>
	</target>


	<!-- ################## mapsforge-map-javadoc ################## -->


	<!-- Create the Javadoc files -->
	<target name="mapsforge-map-javadoc-create">
		<delete dir="${mapsforge.doc}/${mapsforge.version}" />
		<mkdir dir="${mapsforge.doc}/${mapsforge.version}" />
		<javadoc destdir="${mapsforge.doc}/${mapsforge.version}"
		         author="false"
		         access="protected"
		         additionalparam="-quiet"
		         classpathref="classpath">
			<fileset dir="${mapsforge.src}" includes="org/mapsforge/android/maps/*.java" />
			<!-- Add links to the online Android javadoc reference -->
			<link href="http://developer.android.com/reference"
			      offline="true"
			      packagelistloc="${basedir}/../../Android/android-sdk-linux_x86/docs/reference" />
		</javadoc>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.doc}" />
		</antcall>
	</target>


	<!-- ################## mapsforge-mapfile-writer-jar ################## -->


	<!-- Create the JAR file -->
	<target name="mapsforge-mapfile-writer-jar-create">
		<mkdir dir="${mapsforge.dist}" />
		<!-- Include source code and generated class files, avoid duplicates -->
		<jar destfile="${mapsforge.dist}/mapsforge-mapfile-writer-${mapsforge.version}.jar"
		     duplicate="preserve">
			<fileset dir="${mapsforge.src}"
			         excludes="org/mapsforge/preprocessing/map/osmosis/plugin.xml"
			         includes="org/mapsforge/preprocessing/map/osmosis/" />
			<!-- excludes="org/mapsforge/preprocessing/map/osmosis/*.xml,org/mapsforge/preprocessing/map/osmosis/*.dat" /> -->
			<fileset dir="${mapsforge.bin}"
			         excludes="org/mapsforge/preprocessing/map/osmosis/plugin.xml"
			         includes="org/mapsforge/preprocessing/map/osmosis/" />
			<!-- excludes="org/mapsforge/preprocessing/map/osmosis/*.xml,org/mapsforge/preprocessing/map/osmosis/*.dat" /> -->
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/core/Rect.java,
						org/mapsforge/core/GeoCoordinate.java,
						org/mapsforge/core/MercatorProjection.java,
						org/mapsforge/core/WGS84.java" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/core/Rect.class,
						org/mapsforge/core/GeoCoordinate.class,
						org/mapsforge/core/MercatorProjection.class,
						org/mapsforge/core/WGS84.class" />
			<fileset dir="${mapsforge.src}/org/mapsforge/preprocessing/map/osmosis/"
			         includes="plugin.xml" />
			<fileset refid="info" />
		</jar>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Sign and verify the JAR file if the keystore exists -->
	<target name="mapsforge-mapfile-writer-jar-sign"
	        depends="check-for-keystore,mapsforge-mapfile-writer-jar-create"
	        if="keystore.present">
		<signjar jar="${mapsforge.dist}/mapsforge-mapfile-writer-${mapsforge.version}.jar"
		         keystore="${mapsforge.keystore.location}"
		         storepass="${mapsforge.keystore.pass}"
		         alias="${mapsforge.keystore.alias}"
		         keypass="${mapsforge.key.pass}" />
		<!-- Verify the signed JAR file and stop if verification was not successful -->
		<exec executable="jarsigner" failonerror="true">
			<arg value="-verify" />
			<arg value="${mapsforge.dist}/mapsforge-mapfile-writer-${mapsforge.version}.jar" />
		</exec>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Copy the created JAR file to the plugins directory -->
	<target name="mapsforge-mapfile-writer-jar-copy"
	        depends="mapsforge-mapfile-writer-jar-sign">
		<copy overwrite="true"
		      file="${mapsforge.dist}/mapsforge-mapfile-writer-${mapsforge.version}.jar"
		      todir="${user.home}/.openstreetmap/osmosis/plugins" />
	</target>


	<!-- ################## mapsforge-routinggraph-writer-jar ################## -->


	<!-- Create the JAR file -->
	<target name="mapsforge-routinggraph-writer-jar-create">
		<mkdir dir="${mapsforge.dist}" />
		<!-- Include source code and generated class files, avoid duplicates -->
		<jar destfile="${mapsforge.dist}/mapsforge-routinggraph-writer-${mapsforge.version}.jar"
		     duplicate="preserve">
			<fileset dir="${mapsforge.src}"
			         excludes="org/mapsforge/preprocessing/routingGraph/osmosis/plugin.xml"
			         includes="org/mapsforge/preprocessing/routingGraph/osmosis/" />
			<fileset dir="${mapsforge.bin}"
			         excludes="org/mapsforge/preprocessing/routingGraph/osmosis/plugin.xml"
			         includes="org/mapsforge/preprocessing/routingGraph/osmosis/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/core/Rect.java,
						org/mapsforge/core/GeoCoordinate.java,
						org/mapsforge/core/MercatorProjection.java,
						org/mapsforge/core/WGS84.java" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/core/Rect.class,
						org/mapsforge/core/GeoCoordinate.class,
						org/mapsforge/core/MercatorProjection.class,
						org/mapsforge/core/WGS84.class" />
			<fileset dir="${mapsforge.src}/org/mapsforge/preprocessing/routingGraph/osmosis/"
			         includes="plugin.xml" />
			<fileset refid="info" />
		</jar>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Sign and verify the JAR file if the keystore exists -->
	<target name="mapsforge-routinggraph-writer-jar-sign"
	        depends="check-for-keystore,mapsforge-routinggraph-writer-jar-create"
	        if="keystore.present">
		<signjar jar="${mapsforge.dist}/mapsforge-routinggraph-writer-${mapsforge.version}.jar"
		         keystore="${mapsforge.keystore.location}"
		         storepass="${mapsforge.keystore.pass}"
		         alias="${mapsforge.keystore.alias}"
		         keypass="${mapsforge.key.pass}" />
		<!-- Verify the signed JAR file and stop if verification was not successful -->
		<exec executable="jarsigner" failonerror="true">
			<arg value="-verify" />
			<arg value="${mapsforge.dist}/mapsforge-routinggraph-writer-${mapsforge.version}.jar" />
		</exec>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Copy the created JAR file to the plugins directory -->
	<target name="mapsforge-routinggraph-writer-jar-copy"
	        depends="mapsforge-routinggraph-writer-jar-sign">
		<copy overwrite="true"
		      file="${mapsforge.dist}/mapsforge-routinggraph-writer-${mapsforge.version}.jar"
		      todir="${user.home}/.openstreetmap/osmosis/plugins" />
	</target>




	<!-- ################## mapsforge-graph-creator-jar ################## -->


	<!-- Create the JAR file -->
	<target name="mapsforge-graph-creator-jar-create">
		<mkdir dir="${mapsforge.dist}" />
		<!-- Include source code and generated class files, avoid duplicates -->
		<jar destfile="${mapsforge.dist}/mapsforge-graph-creator-${mapsforge.version}.jar"
		     duplicate="preserve">
			<fileset dir="${mapsforge.src}"
			         excludes="org/mapsforge/preprocessing/routingGraph/graphCreation/plugin.xml"
			         includes="org/mapsforge/preprocessing/routingGraph/graphCreation/" />
			<fileset dir="${mapsforge.bin}"
			         excludes="org/mapsforge/preprocessing/routingGraph/graphCreation/plugin.xml"
			         includes="org/mapsforge/preprocessing/routingGraph/graphCreation/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/core/Rect.java,
							org/mapsforge/core/Edge.java,
							org/mapsforge/core/Vertex.java,
							org/mapsforge/core/GeoCoordinate.java,
							org/mapsforge/core/MercatorProjection.java,
							org/mapsforge/core/WGS84.java" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/core/Rect.class,
							org/mapsforge/core/Edge.class,
							org/mapsforge/core/Vertex.class,					
							org/mapsforge/core/GeoCoordinate.class,
							org/mapsforge/core/MercatorProjection.class,
							org/mapsforge/core/WGS84.class" />
			<fileset dir="${mapsforge.src}/org/mapsforge/preprocessing/routingGraph/graphCreation/"
			         includes="plugin.xml" />
			<fileset refid="info" />
		</jar>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Sign and verify the JAR file if the keystore exists -->
	<target name="mapsforge-graph-creator-jar-sign"
	        depends="check-for-keystore,mapsforge-graph-creator-jar-create"
	        if="keystore.present">
		<signjar jar="${mapsforge.dist}/mapsforge-graph-creator-${mapsforge.version}.jar"
		         keystore="${mapsforge.keystore.location}"
		         storepass="${mapsforge.keystore.pass}"
		         alias="${mapsforge.keystore.alias}"
		         keypass="${mapsforge.key.pass}" />
		<!-- Verify the signed JAR file and stop if verification was not successful -->
		<exec executable="jarsigner" failonerror="true">
			<arg value="-verify" />
			<arg value="${mapsforge.dist}/mapsforge-graph-creator-${mapsforge.version}.jar" />
		</exec>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Copy the created JAR file to the plugins directory -->
	<target name="mapsforge-graph-creator-jar-copy" depends="mapsforge-graph-creator-jar-sign">
		<copy overwrite="true"
		      file="${mapsforge.dist}/mapsforge-graph-creator-${mapsforge.version}.jar"
		      todir="${user.home}/.openstreetmap/osmosis/plugins" />
	</target>



	<!-- ################## mapsforge-multimodal-routing.jar ################## -->


	<!-- Create the JAR file -->
	<target name="mapsforge-multimodal-routing-jar-create">
		<mkdir dir="${mapsforge.dist}" />
		<!-- Include source code and generated class files, avoid duplicates -->
		<jar destfile="${mapsforge.dist}/mapsforge-multimodal-routing-${mapsforge.version}.jar"
		     duplicate="preserve">
			<fileset dir="${mapsforge.bin}" includes="org/mapsforge/core/" />
			<fileset dir="${mapsforge.src}" includes="org/mapsforge/core/" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/preprocessing/routingGraph/graphCreation/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/preprocessing/routingGraph/graphCreation/" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/preprocessing/highwayHierarchies/hierarchyComputation/util/renderer/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/preprocessing/highwayHierarchies/hierarchyComputation/util/renderer/" />
		</jar>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- ################## mapsforge-routing.jar ################## -->


	<!-- Create the JAR file -->
	<target name="mapsforge-onboard-routing-jar-create">
		<mkdir dir="${mapsforge.dist}" />
		<!-- Include source code and generated class files, avoid duplicates -->
		<jar destfile="${mapsforge.dist}/mapsforge-onboard-routing-${mapsforge.version}.jar"
		     duplicate="preserve">
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/android/mobileHighwayHierarchies/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/android/mobileHighwayHierarchies/" />
			<fileset dir="${mapsforge.bin}" includes="org/mapsforge/core/" />
			<fileset dir="${mapsforge.src}" includes="org/mapsforge/core/" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/preprocessing/highwayHierarchies/mobile/HHGlobals.*" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/preprocessing/highwayHierarchies/mobile/HHGlobals.*" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/preprocessing/highwayHierarchies/hierarchyComputation/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/preprocessing/highwayHierarchies/hierarchyComputation/" />
		</jar>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Sign and verify the JAR file if the keystore exists -->
	<target name="mapsforge-onboard-routing-jar-sign"
	        depends="check-for-keystore,mapsforge-onboard-routing-jar-create"
	        if="keystore.present">
		<signjar jar="${mapsforge.dist}/mapsforge-onboard-routing-${mapsforge.version}.jar"
		         keystore="${mapsforge.keystore.location}"
		         storepass="${mapsforge.keystore.pass}"
		         alias="${mapsforge.keystore.alias}"
		         keypass="${mapsforge.key.pass}" />
		<!-- Verify the signed JAR file and stop if verification was not successful -->
		<exec executable="jarsigner" failonerror="true">
			<arg value="-verify" />
			<arg value="${mapsforge.dist}/mapsforge-onboard-routing-${mapsforge.version}.jar" />
		</exec>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Copy the created JAR file to the other projects -->
	<target name="mapsforge-onboard-routing-jar-copy"
	        depends="mapsforge-onboard-routing-jar-sign">
		<copy overwrite="true"
		      file="${mapsforge.dist}/mapsforge-onboard-routing-${mapsforge.version}.jar"
		      todir="${mapsforge.advancemapviewer.lib.dir}" />
		<copy overwrite="true"
		      file="${mapsforge.dist}/mapsforge-onboard-routing-${mapsforge.version}.jar"
		      todir="${mapsforge.samples.lib.dir}" />
		<antcall target="eclipse-refresh">
			<param name="resource" value="AdvancedMapViewer/lib" />
		</antcall>
		<antcall target="eclipse-refresh">
			<param name="resource" value="Samples/lib" />
		</antcall>
	</target>


	<!-- ################## mapsforge-offboard-routing.jar ################## -->


	<!-- Create the JAR file -->
	<target name="mapsforge-offboard-routing-jar-create">
		<mkdir dir="${mapsforge.dist}" />
		<!-- Include source code and generated class files, avoid duplicates -->
		<jar destfile="${mapsforge.dist}/mapsforge-offboard-routing-${mapsforge.version}.jar"
		     duplicate="preserve">
			<!--manifest>
				<attribute name="Main-Class" value="org.mapsforge.preprocessing.highwayHierarchies.CommandLineUtil"/>
			</manifest-->
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/server/highwayHierarchies/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/server/highwayHierarchies/" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/preprocessing/highwayHierarchies/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/preprocessing/highwayHierarchies/" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/preprocessing/routingGraph/dao/" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/preprocessing/routingGraph/dao/" />
			<fileset dir="${mapsforge.bin}"
			         includes="org/mapsforge/preprocessing/routingGraph/osmosis/TagHighway.*" />
			<fileset dir="${mapsforge.src}"
			         includes="org/mapsforge/preprocessing/routingGraph/osmosis/TagHighway.*" />
			<fileset dir="${mapsforge.bin}" includes="org/mapsforge/core/" />
			<fileset dir="${mapsforge.src}" includes="org/mapsforge/core/" />
			<fileset refid="info" />
		</jar>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Sign and verify the JAR file if the keystore exists -->
	<target name="mapsforge-offboard-routing-jar-sign"
	        depends="check-for-keystore,mapsforge-offboard-routing-jar-create"
	        if="keystore.present">
		<signjar jar="${mapsforge.dist}/mapsforge-offboard-routing-${mapsforge.version}.jar"
		         keystore="${mapsforge.keystore.location}"
		         storepass="${mapsforge.keystore.pass}"
		         alias="${mapsforge.keystore.alias}"
		         keypass="${mapsforge.key.pass}" />
		<!-- Verify the signed JAR file and stop if verification was not successful -->
		<exec executable="jarsigner" failonerror="true">
			<arg value="-verify" />
			<arg value="${mapsforge.dist}/mapsforge-offboard-routing-${mapsforge.version}.jar" />
		</exec>
		<antcall target="eclipse-refresh">
			<param name="resource" value="mapsforge/${mapsforge.dist}" />
		</antcall>
	</target>


	<!-- Copy the created JAR file to the servlet directory -->
	<target name="mapsforge-offboard-routing-jar-copy"
	        depends="mapsforge-offboard-routing-jar-create,mapsforge-offboard-routing-jar-sign">
		<copy overwrite="true"
		      file="${mapsforge.dist}/mapsforge-offboard-routing-${mapsforge.version}.jar"
		      todir="${mapsforge.routingservlet.lib.dir}" />
		<antcall target="eclipse-refresh">
			<param name="resource" value="HHRoutingWebservice" />
		</antcall>
	</target>


	<target name="mapsforge-build-highway-highrarchies-routing-file">
		<java fork="true" classname="org.mapsforge.preprocessing.graph.osm2rg.RgExtractor">
			<arg value="${basedir}/res/conf/osm2rg.properties" />
			<classpath>
				<pathelement location="${mapsforge.bin}" />
				<pathelement location="${mapsforge.lib}/postgresql-8.4-701.jdbc4.jar" />
				<pathelement location="${mapsforge.lib}/trove-3.0.0rc1.jar" />
			</classpath>
		</java>
		<java fork="true"
		      classname="org.mapsforge.preprocessing.routing.highwayHierarchies.HHComputation">
			<arg value="${basedir}/res/conf/hhPreprocessing.properties" />
			<classpath>
				<pathelement location="${mapsforge.bin}" />
				<pathelement location="${mapsforge.lib}/postgresql-8.4-701.jdbc4.jar" />
				<pathelement location="${mapsforge.lib}/trove-3.0.0rc1.jar" />
			</classpath>
		</java>
	</target>
</project>