//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.03.11 at 03:25:14 PM MEZ 
//

package org.mapsforge.preprocessing.automization;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for read-pbf complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="read-pbf">
 *   &lt;complexContent>
 *     &lt;extension base="{http://mapsforge.org/mapsforge-preprocessing-conf}source">
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "read-pbf")
public class ReadPbf extends Source {

	@Override
	public String generate(List<String> md5List, String absoluteWorkingDirPath,
			String absoluteOutputDirPath) {

		File inputFile = null;
		try {
			inputFile = FileOperation.createReadFile(absoluteWorkingDirPath, getFile());
		} catch (FileNotFoundException e) {
			System.err.println("Error! File to read does not exits.");
			e.printStackTrace();
		} catch (IOException e) {
			System.err.println("Error! Can not open file to read.");
			e.printStackTrace();
		}

		if (inputFile == null)
			throw new RuntimeException("An unexpected error occured. File is null.");

		// TODO: DEBUG
		System.out.println("DEBUG: readpbf: inputfile: " + inputFile.getAbsolutePath());
		StringBuilder sb = new StringBuilder();
		sb.append("--rb file=").append(inputFile.getAbsolutePath()).append(" ");
		sb.append(super.generate(md5List, absoluteWorkingDirPath, absoluteOutputDirPath));
		return sb.toString();
	}
}
