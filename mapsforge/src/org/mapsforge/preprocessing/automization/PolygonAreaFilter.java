//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.03.11 at 03:25:14 PM MEZ 
//

package org.mapsforge.preprocessing.automization;

import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for polygon-area-filter complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="polygon-area-filter">
 *   &lt;complexContent>
 *     &lt;extension base="{http://mapsforge.org/mapsforge-preprocessing-conf}sink-source">
 *       &lt;attribute name="polygon-file" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "polygon-area-filter")
public class PolygonAreaFilter extends SinkSource {

	/**
	 * The path to the polygon file that is needed to extract the data of a polygon area.
	 */
	@XmlAttribute(name = "polygon-file", required = true)
	private String polygonFile;

	/**
	 * The parameter to turn on the completeWays function.
	 */
	@XmlAttribute(name = "completeWays")
	private Boolean completeWays;

	/**
	 * The parameter to turn on the completeRelations function.
	 */
	@XmlAttribute(name = "completeRelations")
	private Boolean completeRelations;

	/**
	 * The parameter to turn on the clipIncompleteEntities function.
	 */
	@XmlAttribute(name = "clipIncompleteEntities")
	private Boolean clipIncompleteEntities;

	/**
	 * Gets the value of the polygonFile property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getPolygonFile() {
		return polygonFile;
	}

	/**
	 * Sets the value of the polygonFile property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setPolygonFile(String value) {
		this.polygonFile = value;
	}

	/**
	 * Gets the value of the completeWays property.
	 * 
	 * @return possible object is {@link Boolean }
	 * 
	 */
	public boolean isCompleteWays() {
		if (completeWays == null) {
			return false;
		}
		return completeWays;
	}

	/**
	 * Sets the value of the completeWays property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 * 
	 */
	public void setCompleteWays(Boolean value) {
		this.completeWays = value;
	}

	/**
	 * Gets the value of the completeRelations property.
	 * 
	 * @return possible object is {@link Boolean }
	 * 
	 */
	public boolean isCompleteRelations() {
		if (completeRelations == null) {
			return false;
		}
		return completeRelations;
	}

	/**
	 * Sets the value of the completeRelations property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 * 
	 */
	public void setCompleteRelations(Boolean value) {
		this.completeRelations = value;
	}

	/**
	 * Gets the value of the clipIncompleteEntities property.
	 * 
	 * @return possible object is {@link Boolean }
	 * 
	 */
	public boolean isClipIncompleteEntities() {
		if (clipIncompleteEntities == null) {
			return false;
		}
		return clipIncompleteEntities;
	}

	/**
	 * Sets the value of the clipIncompleteEntities property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 * 
	 */
	public void setClipIncompleteEntities(Boolean value) {
		this.clipIncompleteEntities = value;
	}

	@Override
	public String generate(List<String> md5List, String absolutePath) {

		StringBuilder sb = new StringBuilder();
		sb.append("--bp").append(" ");
		sb.append("file=").append(getPolygonFile()).append(" ");
		if (completeWays != null)
			sb.append("completeWays=").append(completeWays).append(" ");
		if (completeRelations != null)
			sb.append("completeRelations=").append(completeRelations).append(" ");
		if (clipIncompleteEntities != null)
			sb.append("clipIncompleteEntities=").append(clipIncompleteEntities).append(" ");

		sb.append(super.generate(md5List, absolutePath));

		return sb.toString();
	}

}
