//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.03.11 at 03:25:14 PM MEZ 
//

package org.mapsforge.preprocessing.automization;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for mapfile-writer complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="mapfile-writer">
 *   &lt;complexContent>
 *     &lt;extension base="{http://mapsforge.org/mapsforge-preprocessing-conf}sink">
 *       &lt;attribute name="type" default="ram">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;enumeration value="ram"/>
 *             &lt;enumeration value="hd"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="bbox" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="map-start-position" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="comment" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="waynode-compression" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="pixel-filter" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="polygon-clipping" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="zoom-interval-conf" type="{http://www.w3.org/2001/XMLSchema}string" default="8,0,11,14,12,21" />
 *       &lt;attribute name="thread-pool-size">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *             &lt;minInclusive value="1"/>
 *             &lt;maxInclusive value="128"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="debug-file" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "mapfile-writer")
public class MapfileWriter
		extends Sink {

	/**
	 * A parameter to declare if the output of the mapfile-writer should be stored in ram or on
	 * disk before writing the map file.
	 */
	@XmlAttribute
	protected String type;

	/**
	 * The parameter for the bbox feature of the mapfile-writer. This is a comma separated
	 * string of doubles that should not have any white space.
	 */
	@XmlAttribute
	protected String bbox;

	/**
	 * The start position to centralized the map.
	 */
	@XmlAttribute(name = "map-start-position")
	protected String mapStartPosition;

	/**
	 * The comment of the user of the mapfile-writer.
	 */
	@XmlAttribute
	protected String comment;

	/**
	 * The parameter to turn on the waynode-compression.
	 */
	@XmlAttribute(name = "waynode-compression")
	protected Boolean waynodeCompression;

	/**
	 * A parameter to turn on the picel-filter.
	 */
	@XmlAttribute(name = "pixel-filter")
	protected Boolean pixelFilter;

	/**
	 * A parameter to turn on the polygon-clipping.
	 */
	@XmlAttribute(name = "polygon-clipping")
	protected Boolean polygonClipping;

	/**
	 * The parameter to configure the zoom intervals.
	 */
	@XmlAttribute(name = "zoom-interval-conf")
	protected String zoomIntervalConf;

	/**
	 * A parameter to set the number of thread that are used to generate the map file. The value
	 * should be twice as the number of cores.
	 */
	@XmlAttribute(name = "thread-pool-size")
	protected Integer threadPoolSize;

	/**
	 * A boolean to switch for writing the debug information into the written map file.
	 */
	@XmlAttribute(name = "debug-file")
	protected Boolean debugFile;

	/**
	 * Gets the value of the type property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getType() {
		if (type == null) {
			return "ram";
		}
		return type;
	}

	/**
	 * Sets the value of the type property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setType(String value) {
		this.type = value;
	}

	/**
	 * Gets the value of the bbox property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getBbox() {
		return bbox;
	}

	/**
	 * Sets the value of the bbox property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setBbox(String value) {
		this.bbox = value;
	}

	/**
	 * Gets the value of the mapStartPosition property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getMapStartPosition() {
		return mapStartPosition;
	}

	/**
	 * Sets the value of the mapStartPosition property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setMapStartPosition(String value) {
		this.mapStartPosition = value;
	}

	/**
	 * Gets the value of the comment property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getComment() {
		return comment;
	}

	/**
	 * Sets the value of the comment property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setComment(String value) {
		this.comment = value;
	}

	/**
	 * Gets the value of the waynodeCompression property.
	 * 
	 * @return possible object is {@link Boolean }
	 * 
	 */
	public boolean getWaynodeCompression() {
		if (waynodeCompression == null) {
			return true;
		}
		return waynodeCompression;
	}

	/**
	 * Sets the value of the waynodeCompression property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 * 
	 */
	public void setWaynodeCompression(Boolean value) {
		this.waynodeCompression = value;
	}

	/**
	 * Gets the value of the pixelFilter property.
	 * 
	 * @return possible object is {@link Boolean }
	 * 
	 */
	public boolean getPixelFilter() {
		if (pixelFilter == null) {
			return true;
		}
		return pixelFilter;
	}

	/**
	 * Sets the value of the pixelFilter property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 * 
	 */
	public void setPixelFilter(Boolean value) {
		this.pixelFilter = value;
	}

	/**
	 * Gets the value of the polygonClipping property.
	 * 
	 * @return possible object is {@link Boolean }
	 * 
	 */
	public boolean getPolygonClipping() {
		if (polygonClipping == null) {
			return true;
		}
		return polygonClipping;
	}

	/**
	 * Sets the value of the polygonClipping property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 * 
	 */
	public void setPolygonClipping(Boolean value) {
		this.polygonClipping = value;
	}

	/**
	 * Gets the value of the zoomIntervalConf property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getZoomIntervalConf() {
		if (zoomIntervalConf == null) {
			return "8,0,11,14,12,21";
		}
		return zoomIntervalConf;
	}

	/**
	 * Sets the value of the zoomIntervalConf property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setZoomIntervalConf(String value) {
		this.zoomIntervalConf = value;
	}

	/**
	 * Gets the value of the threadPoolSize property.
	 * 
	 * @return possible object is {@link Integer }
	 * 
	 */
	public Integer getThreadPoolSize() {
		return threadPoolSize;
	}

	/**
	 * Sets the value of the threadPoolSize property.
	 * 
	 * @param value
	 *            allowed object is {@link Integer }
	 * 
	 */
	public void setThreadPoolSize(Integer value) {
		this.threadPoolSize = value;
	}

	/**
	 * Gets the value of the debugFile property.
	 * 
	 * @return possible object is {@link Boolean }
	 * 
	 */
	public boolean getDebugFile() {
		if (debugFile == null) {
			return false;
		}
		return debugFile;
	}

	/**
	 * Sets the value of the debugFile property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 * 
	 */
	public void setDebugFile(Boolean value) {
		this.debugFile = value;
	}

	@Override
	public String generate() {
		StringBuilder sb = new StringBuilder();
		sb.append("--mw").append(" ");
		sb.append("file=").append(file).append(" ");
		if (type != null)
			sb.append("type=").append(getType()).append(" ");

		if (bbox != null)
			sb.append("bbox=").append(bbox).append(" ");
		if (mapStartPosition != null)
			sb.append("map-start-position=").append(mapStartPosition).append(" ");
		if (comment != null)
			sb.append("comment=").append(comment).append(" ");
		if (waynodeCompression != null)
			sb.append("waynode-compression=").append(getWaynodeCompression()).append(" ");
		if (pixelFilter != null)
			sb.append("pixel-filter=").append(getPixelFilter()).append(" ");
		if (polygonClipping != null)
			sb.append("polygon-clipping=").append(getPolygonClipping()).append(" ");
		if (zoomIntervalConf != null)
			sb.append("zoom-interval-conf=").append(getZoomIntervalConf()).append(" ");
		if (threadPoolSize != null)
			sb.append("thread-pool-size=").append(threadPoolSize).append(" ");
		if (debugFile != null)
			sb.append("debug-file=").append(getDebugFile()).append(" ");
		return sb.toString();
	}
}
